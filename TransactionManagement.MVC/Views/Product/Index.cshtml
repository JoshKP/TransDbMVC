@model IEnumerable<TransactionManagement.MVC.Models.ProductModels.ProductListItem>

@{
    ViewBag.Title = "Index";
}

<h2>Index</h2>
@if (User.Identity.IsAuthenticated)
{
    <p>
        @Html.ActionLink("Create New", "Create")
    </p>
}


@if (TempData.ContainsKey("SaveResult"))
{
    <div class="alert alert-success fade in" role="alert">

        <button type="button" class="close" data-dismiss="alert">
            <span>&times;</span>
        </button>
        @TempData["SaveResult"]
    </div>
}

<div class="row">
    @foreach (var item in Model)
    {
            <div class="col-md-3 product-container">
        <a href="@Url.Action("Details", new {id = item.ProductId})">
                <div class="product-card">
                    <div class="product-title">
                        @Html.DisplayFor(modelItem => item.Name)
                        @if (User.Identity.IsAuthenticated)
                        {
                            @Html.DisplayFor(modelItem => item.ProductId)
                            @Html.DisplayFor(modelItem => item.SupplierId)
                        }
                    </div>
                    <div class="product-body">
                        <div class="product-info">
                            @Html.DisplayFor(modelItem => item.Price)
                            @if (User.Identity.IsAuthenticated)
                            {
                                @Html.DisplayFor(modelItem => item.Category)
                                @Html.DisplayFor(modelItem => item.InventoryCount)
                            }
                            @Html.DisplayFor(modelItem => item.Notes)
                        </div>
                        <div class="product-image">
                            <img src="/Product/RetrieveImage/@item.ProductId" alt="" height="135" width="240" />
                        </div>
                        <div class="product-options">
                            
                            @if (User.Identity.IsAuthenticated)
                            {
                                @Html.ActionLink("Edit", "Edit", new { id = item.ProductId })

                                @Html.ActionLink("Delete", "Delete", new { id = item.ProductId })
                            }
                        </div>
                    </div>
                </div>
        </a>
            </div>
    }
</div>

@*<div class="card-columns">
        @foreach (var item in Model)
        {
            <div class="card">
                <div class="card-img" stye="background-image: url('');"></div>
                <div class="card-body">
                    <h5 class="card-title">@item.Name</h5>
                </div>
            </div>
        }
    </div>*@


@*@section scripts {
        <script language="javascript" type="text/javascript">
            $(document).ready(function () {
                $("i[data-toggle='star']")
                    .css({ "cursor": "pointer" })
                    .click(function (e) {
                        var target = $(e.target);
                        var noteId = target.attr("data-id");
                        var starSet = target.hasClass("glyphicon-star");

                        $.ajax({
                            method: starSet ? "DELETE" : "PUT",
                            url: "/api/note/" + noteId + "/star",
                            data: null
                        })
                            .done(function (r) {
                                target.removeClass();
                                target.addClass("glyphicon " + (starSet ? "glyphicon-star-empty" : "glyphicon-star"));
                            })
                            .fail(function (r) {
                                alert("Failed to change star status");
                            });
                    });
            });
        </script>
    }*@
<div id="smart-button-container">
    <div style="text-align: center;">
        <div style="margin-bottom: 1.25rem;">
            <p>Product & Price | Quantity</p>
            <select id="item-options"><option value="Winter Coat" price="200">Winter Coat - 200 USD</option><option value="Board  Shorts" price="50">Board  Shorts - 50 USD</option><option value="Flannel Shirt" price="32">Flannel Shirt - 32 USD</option><option value="Rain Coat" price="54">Rain Coat - 54 USD</option></select>
            <select style="visibility: hidden" id="quantitySelect"><option value="1">1</option><option value="2">2</option><option value="3">3</option><option value="4">4</option><option value="5">5</option><option value="6">6</option><option value="7">7</option><option value="8">8</option><option value="9">9</option><option value="10">10</option></select>
        </div>
        <div id="paypal-button-container"></div>
    </div>
</div>
<script src="https://www.paypal.com/sdk/js?client-id=AURdGdEIxP1kWLz69El_edzFBslS7GxlUe6G8aknDvjtD6FUuW6O9PY1v1WOxVtmMBTYGyZHj1inJKnF&currency=USD" data-sdk-integration-source="button-factory"></script>
<script>
    function initPayPalButton() {
        var shipping = 4.99;
        var itemOptions = document.querySelector("#smart-button-container #item-options");
        var quantity = parseInt(10);
        var quantitySelect = document.querySelector("#smart-button-container #quantitySelect");
        if (!isNaN(quantity)) {
            quantitySelect.style.visibility = "visible";
        }
        var orderDescription = 'Product & Price | Quantity';
        if (orderDescription === '') {
            orderDescription = 'Item';
        }
        paypal.Buttons({
            style: {
                shape: 'rect',
                color: 'gold',
                layout: 'vertical',
                label: 'buynow',

            },
            createOrder: function (data, actions) {
                var selectedItemDescription = itemOptions.options[itemOptions.selectedIndex].value;
                var selectedItemPrice = parseFloat(itemOptions.options[itemOptions.selectedIndex].getAttribute("price"));
                var tax = (9 === 0) ? 0 : (selectedItemPrice * (parseFloat(9) / 100));
                if (quantitySelect.options.length > 0) {
                    quantity = parseInt(quantitySelect.options[quantitySelect.selectedIndex].value);
                } else {
                    quantity = 1;
                }

                tax *= quantity;
                tax = Math.round(tax * 100) / 100;
                var priceTotal = quantity * selectedItemPrice + parseFloat(shipping) + tax;
                priceTotal = Math.round(priceTotal * 100) / 100;
                var itemTotalValue = Math.round((selectedItemPrice * quantity) * 100) / 100;

                return actions.order.create({
                    purchase_units: [{
                        description: orderDescription,
                        amount: {
                            currency_code: 'USD',
                            value: priceTotal,
                            breakdown: {
                                item_total: {
                                    currency_code: 'USD',
                                    value: itemTotalValue,
                                },
                                shipping: {
                                    currency_code: 'USD',
                                    value: shipping,
                                },
                                tax_total: {
                                    currency_code: 'USD',
                                    value: tax,
                                }
                            }
                        },
                        items: [{
                            name: selectedItemDescription,
                            unit_amount: {
                                currency_code: 'USD',
                                value: selectedItemPrice,
                            },
                            quantity: quantity
                        }]
                    }]
                });
            },
            onApprove: function (data, actions) {
                return actions.order.capture().then(function (details) {
                    alert('Transaction completed by ' + details.payer.name.given_name + '!');
                });
            },
            onError: function (err) {
                console.log(err);
            },
        }).render('#paypal-button-container');
    }
    initPayPalButton();
</script>
